services:
  # Neo4j service setup
  neo4j:
    image: neo4j:5.26
    container_name: neo4j
    environment:
      # Set the password for the Neo4j instance dynamically from environment
      NEO4J_AUTH: "neo4j/${NEO4J_PASSWORD}"
    ports:
      - "7474:7474"  # HTTP port for Neo4j browser
      - "7687:7687"  # Bolt port for Neo4j communication
    volumes:
      - neo4j_data:/data  # Persistent data storage for Neo4j

  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile  # Dockerfile to build the backend container
    container_name: backend
    working_dir: /app  # Working directory inside the container
    env_file:
      - .env  # Load environment variables from .env file
    volumes:
      # Mount local directories to the container
      - ./file:/app/file
      - ./src/logs/backend:/app/logs  # Logs for backend
      - ./src/backend/sqlite_db:/app/sqlite_db  # SQLite DB for the backend
      # - ./.env:/app/.env:ro  # Read-only environment file
    environment:
      LOG_DIR: /app/logs  # Set the log directory inside the container
    ports:
      - "8000:8000"  # Expose the FastAPI app on port 8000
    depends_on:
      - neo4j  # Wait for the Neo4j service before starting the backend

  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile  # Dockerfile to build the frontend container
      args:
        API_URL: "http://backend:8000"  # Set the backend URL for the frontend to communicate with
    container_name: frontend
    volumes:
      - ./src/logs/frontend:/app/logs  # Logs for frontend
    ports:
      - "8501:8501"  # Expose the Streamlit frontend on port 8501
    depends_on:
      - backend  # Wait for the backend service to be available

  prometheus:
    image: prom/prometheus:v3.3.0  # Prometheus image for monitoring
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml  # Prometheus config file
    ports:
      - "9090:9090"  # Expose Prometheus web UI on port 9090
    depends_on:
      - backend  # Ensure backend is ready before starting Prometheus

# Define named volumes for persistence
volumes:
  neo4j_data:
    driver: local  # Use local driver for persistent storage
